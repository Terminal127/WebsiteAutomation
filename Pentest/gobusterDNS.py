import os
import subprocess

# Function to list available wordlists in a directory
def list_wordlists(directory):
    wordlists = os.listdir(directory)
    return wordlists

# Function to add an entry to the hosts file
def add_to_hosts_file(ip, hostname):
    with open('/etc/hosts', 'a') as hosts_file:
        hosts_file.write(f"{ip} {hostname}\n")
    print(f"Entry for {ip} ({hostname}) added to hosts file.")

# Define the path to the wordlists directory
wordlist_dir = "/usr/share/seclists/Discovery/DNS"

# List available wordlists in the directory
available_wordlists = list_wordlists(wordlist_dir)

# Display available wordlists to the user
print("Available wordlists in /usr/share/seclists/Discovery/DNS:")
for i, wordlist in enumerate(available_wordlists, start=1):
    print(f"{i}. {wordlist}")

# Get the target URL
target_url = input("Enter the target URL: ").strip()

# Get the index of the selected wordlist
while True:
    try:
        wordlist_index = int(input("Enter the number of the wordlist to use: "))
        if 1 <= wordlist_index <= len(available_wordlists):
            break
        else:
            print("Invalid choice. Please select a valid number.")
    except ValueError:
        print("Invalid input. Please enter a number.")

# Get the file extensions to search for
extensions = input("Enter file extensions to search for (comma-separated, e.g., php,html,htm): ").strip().split(',')
extensions = [ext.strip() for ext in extensions]

# Get the IP address and website name
target_ip = input("Enter the target IP address: ").strip()
website_name = input("Enter the target website name (e.g., www.example.com): ").strip()

# Check if the IP address is already in the hosts file
with open('/etc/hosts', 'r') as hosts_file:
    hosts_content = hosts_file.read()
    if f"{target_ip}    {website_name}" not in hosts_content:
        add_to_hosts = input(f"Do you want to add an entry for {target_ip} in your hosts file (Y/N)? ").strip().lower()
        if add_to_hosts == 'y':
            add_to_hosts_file(target_ip, website_name)

# Build the Gobuster directory fuzzing command
wordlist_path = os.path.join(wordlist_dir, available_wordlists[wordlist_index - 1])
gobuster_dir_command = ["gobuster", "dir", "-u", website_name, "-w", wordlist_path, "-x", ",".join(extensions)]

# Build the Gobuster vhost command
vhost_wordlist_path = "/usr/share/wordlists/amass/subdomains-top1mil-5000.txt"
vhost_target_url = input("Enter the target URL for vhost fuzzing (e.g., http://example.com): ").strip()
gobuster_vhost_command = ["gobuster", "vhost", "-w", vhost_wordlist_path, "-u", vhost_target_url]

# Ask the user to choose between Gobuster DNS and Gobuster vhost
while True:
    choice = input("Choose an option (DNS/VHOST): ").strip().lower()
    if choice == 'dns':
        try:
            # Run the Gobuster directory fuzzing command
            subprocess.run(gobuster_dir_command, check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error running gobuster: {e}")
        except FileNotFoundError:
            print("gobuster command not found. Make sure it's installed and in your PATH.")
        break
    elif choice == 'vhost':
        try:
            # Run the Gobuster vhost fuzzing command
            subprocess.run(gobuster_vhost_command, check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error running gobuster vhost: {e}")
        except FileNotFoundError:
            print("gobuster command not found. Make sure it's installed and in your PATH.")
        break
    else:
        print("Invalid choice. Please choose either DNS or VHOST.")

